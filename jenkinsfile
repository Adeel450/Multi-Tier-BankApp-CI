pipeline {
    agent any
    tools {
        maven 'maven3'
    }
    environment {
        SCANNER_HOME = tool "sonar-scanner"
        IMAGE_TAG = "V${BUILD_NUMBER}"
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'git', url: 'https://github.com/Adeel450/Multi-Tier-BankApp-CI.git'
            }
        }

        stage('Compile') {
            steps {
                sh 'mvn clean compile -Dmaven.test.skip=true'
            }
        }

        stage('Trivy FS Scan') {
            steps {
                sh 'trivy fs --format table -o fs-report.html .'
            }
        }

        stage('Sonarqube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh """
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=GCBank \
                        -Dsonar.projectKey=GCBank \
                        -Dsonar.java.binaries=target
                    """
                }
            }
        }

        stage('Quality Gate Check') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }

        stage('Build') {
            steps {
                sh 'mvn package -Dmaven.test.skip=true'
            }
        }

        stage('Publish Artifacts') {
            steps {
                withMaven(globalMavenSettingsConfig: 'devopsshack', maven: 'maven3', traceability: true) {
                    sh 'mvn deploy -Dmaven.test.skip=true'
                }
            }
        }

        stage('Build & Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        sh "docker build -t adeel1144/adeel:$IMAGE_TAG ."
                    }
                }
            }
        }

        stage('Trivy IMAGE Scan') {
            steps {
                sh "trivy image --format table -o IMAGE-report.html adeel1144/adeel:$IMAGE_TAG"
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        sh "docker push adeel1144/adeel:$IMAGE_TAG"
                    }
                }
            }
        }

        stage('Update Manifest File in Mega-Project-CD') {
            steps {
                script {
                    cleanWs()
                    withCredentials([usernamePassword(credentialsId: 'git', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh '''
                            git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/Adeel450/Multi-Tier-BankApp-CD.git
                            cd Multi-Tier-BankApp-CD

                            sed -i "s|adeel1144/bankapp:.*|adijaiswal/bankapp:${IMAGE_TAG}|" Manifest/manifest.yaml

                            echo "Updated manifest file contents:"
                            cat Manifest/manifest.yaml

                            git config user.name "Adeel450"
                            git config user.email "adeel.sixer88@gmail.com"

                            git add Manifest/manifest.yaml
                            if git diff --cached --quiet; then
                                echo "No changes detected in manifest.yaml, skipping commit."
                            else
                                git commit -m "Update image tag to ${IMAGE_TAG}"
                                git push origin main
                            fi
                        '''
                    }
                }
            }
        }
    } // end stages

    post {
        always {
            script {
                def jobName = env.JOB_NAME
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
                def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'

                def body = """
                <html>
                <body>
                  <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                    <h2>${jobName} - Build #${buildNumber}</h2>
                    <div style="background-color: ${bannerColor}; padding: 10px;">
                      <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                    </div>
                    <p>Check the <a href="${BUILD_URL}">console output</a>.</p>
                  </div>
                </body>
                </html>
                """

                emailext(
                    subject: "${jobName} - Build #${buildNumber} - ${pipelineStatus.toUpperCase()}",
                    body: body,
                    mimeType: 'text/html',
                    to: 'awsdevops753@gmail.com',
                    from: 'awsdevops753@gmail.com',
                    replyTo: 'awsdevops753@gmail.com',
                )
            }
        }
    }
}
